序列图： full story with Http Cookie Expired

# App刷新Cookie(处理ERROR_COOKIE_EXPIRED)需要注意：
 1.如刷新无法成功，需要调用api stopRecord终止录音
 2.避免死循环：过程中如果SDK再报错ERROR_COOKIE_EXPIRED，不做处理

# SDK 上报 ERROR_SERVICE_NOT_AVAILABLE 以后，将直接丢弃音频数据，避免空耗太多内存


@startuml
actor User
participant App
participant AudioSdk as Sdk
participant AudioServer as Server

App -> Sdk: initSdk
App -> Sdk: setCookie

User -> App: pushToTalk
activate App
App -> Sdk: apiRealTimeRecord

activate Sdk
Sdk -> Sdk: beginRecord
Sdk -> Server: connectWebSocket
Sdk <-- Server: connectFailed

|||
loop until not ERROR_COOKIE_EXPIRED
Sdk -> Sdk: fetchAudioData
Sdk -> Server: http sendData first
    Sdk <-- Server: ERROR_COOKIE_EXPIRED
    alt errorCount < 3
        Sdk -> App: callback("", ERROR_COOKIE_EXPIRED)
        App -> App: getLatestCookie(eg: Lark.autoLogin)
        App -> Sdk: setCookie
        App -> Sdk: apiRealTimeRecord
        Sdk -> Sdk: fetchAudioData
        Sdk -> Server: http sendData first
    else errorCount >= 3
        Sdk -> App: callback("", ERROR_SERVICE_NOT_AVAILABLE)
    end
end


loop fetchAndSend while audio data not empty / MultiThread concurrency
Sdk -> Sdk: fetchAudioData
Sdk -> Server: http sendData
    alt when success
    Server --> Sdk: textResult
    Sdk -> App: callback(text, SUCCESS)
    else when failed
    Server --> Sdk: errorMessage
    Sdk -> App: callback(errMsg, ERROR_SNIPPET)
    end
end

... RECORDING ...
User -> App: releaseEndTalk
App -> Sdk: apiStopRecord
deactivate App
Sdk -> Sdk: stopRecord

loop fetchAndSend while audio data not empty / MultiThread concurrency
Sdk -> Sdk: fetchAudioData
Sdk -> Server: http sendData
    alt when success
    Server --> Sdk: textResult
    Sdk -> App: callback(text, SUCCESS)
    else when failed
    Server --> Sdk: errorMessage
    Sdk -> App: callback(errMsg, ERROR_SNIPPET)
    end
end

Sdk -> App: callback("", FINISH)
'deactivate Sdk
deactivate Sdk

@enduml